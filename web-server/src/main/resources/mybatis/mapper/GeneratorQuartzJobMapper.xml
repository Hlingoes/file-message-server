<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.henry.study.web.mapper.GeneratorQuartzJobMapper">
  <resultMap id="BaseResultMap" type="cn.henry.study.web.entity.GeneratorQuartzJob">
    <id excelColumn="id" jdbcType="BIGINT" property="id" />
    <result excelColumn="job_name" jdbcType="VARCHAR" property="jobName" />
    <result excelColumn="job_group" jdbcType="VARCHAR" property="jobGroup" />
    <result excelColumn="job_class_name" jdbcType="VARCHAR" property="jobClassName" />
    <result excelColumn="cron_expression" jdbcType="VARCHAR" property="cronExpression" />
    <result excelColumn="trigger_state" jdbcType="VARCHAR" property="triggerState" />
    <result excelColumn="old_job_name" jdbcType="VARCHAR" property="oldJobName" />
    <result excelColumn="old_job_group" jdbcType="VARCHAR" property="oldJobGroup" />
    <result excelColumn="description" jdbcType="VARCHAR" property="description" />
    <result excelColumn="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result excelColumn="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, job_name, job_group, job_class_name, cron_expression, trigger_state, old_job_name, 
    old_job_group, description, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from quartz_job
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from quartz_job
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="cn.henry.study.web.entity.GeneratorQuartzJob">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into quartz_job (job_name, job_group, job_class_name, 
      cron_expression, trigger_state, old_job_name, 
      old_job_group, description, create_time, 
      update_time)
    values (#{jobName,jdbcType=VARCHAR}, #{jobGroup,jdbcType=VARCHAR}, #{jobClassName,jdbcType=VARCHAR}, 
      #{cronExpression,jdbcType=VARCHAR}, #{triggerState,jdbcType=VARCHAR}, #{oldJobName,jdbcType=VARCHAR}, 
      #{oldJobGroup,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.henry.study.web.entity.GeneratorQuartzJob">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into quartz_job
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jobName != null">
        job_name,
      </if>
      <if test="jobGroup != null">
        job_group,
      </if>
      <if test="jobClassName != null">
        job_class_name,
      </if>
      <if test="cronExpression != null">
        cron_expression,
      </if>
      <if test="triggerState != null">
        trigger_state,
      </if>
      <if test="oldJobName != null">
        old_job_name,
      </if>
      <if test="oldJobGroup != null">
        old_job_group,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobGroup != null">
        #{jobGroup,jdbcType=VARCHAR},
      </if>
      <if test="jobClassName != null">
        #{jobClassName,jdbcType=VARCHAR},
      </if>
      <if test="cronExpression != null">
        #{cronExpression,jdbcType=VARCHAR},
      </if>
      <if test="triggerState != null">
        #{triggerState,jdbcType=VARCHAR},
      </if>
      <if test="oldJobName != null">
        #{oldJobName,jdbcType=VARCHAR},
      </if>
      <if test="oldJobGroup != null">
        #{oldJobGroup,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.henry.study.web.entity.GeneratorQuartzJob">
    update quartz_job
    <set>
      <if test="jobName != null">
        job_name = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobGroup != null">
        job_group = #{jobGroup,jdbcType=VARCHAR},
      </if>
      <if test="jobClassName != null">
        job_class_name = #{jobClassName,jdbcType=VARCHAR},
      </if>
      <if test="cronExpression != null">
        cron_expression = #{cronExpression,jdbcType=VARCHAR},
      </if>
      <if test="triggerState != null">
        trigger_state = #{triggerState,jdbcType=VARCHAR},
      </if>
      <if test="oldJobName != null">
        old_job_name = #{oldJobName,jdbcType=VARCHAR},
      </if>
      <if test="oldJobGroup != null">
        old_job_group = #{oldJobGroup,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.henry.study.web.entity.GeneratorQuartzJob">
    update quartz_job
    set job_name = #{jobName,jdbcType=VARCHAR},
      job_group = #{jobGroup,jdbcType=VARCHAR},
      job_class_name = #{jobClassName,jdbcType=VARCHAR},
      cron_expression = #{cronExpression,jdbcType=VARCHAR},
      trigger_state = #{triggerState,jdbcType=VARCHAR},
      old_job_name = #{oldJobName,jdbcType=VARCHAR},
      old_job_group = #{oldJobGroup,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>